/*********************************************************************************/
/*                                                                               */
/*  Copyright (C) 2024 Seif Kandil (k0T0z)                                       */
/*                                                                               */
/*  This file is a part of the ENIGMA Development Environment.                   */
/*                                                                               */
/*                                                                               */
/*  ENIGMA is free software: you can redistribute it and/or modify it under the  */
/*  terms of the GNU General Public License as published by the Free Software    */
/*  Foundation, version 3 of the license or any later version.                   */
/*                                                                               */
/*  This application and its source code is distributed AS-IS, WITHOUT ANY       */
/*  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS    */
/*  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more        */
/*  details.                                                                     */
/*                                                                               */
/*  You should have recieved a copy of the GNU General Public License along      */
/*  with this code. If not, see <http://www.gnu.org/licenses/>                   */
/*                                                                               */
/*  ENIGMA is an environment designed to create games and other programs with a  */
/*  high-level, fully compilable language. Developers of ENIGMA or anything      */
/*  associated with ENIGMA are in no way responsible for its users or            */
/*  applications created by its users, or damages caused by the environment      */
/*  or programs made in the environment.                                         */
/*                                                                               */
/*********************************************************************************/

syntax = "proto3";
package gui.model.schema;

import "visual_shader_nodes.proto";

// Check https://protobuf.dev/programming-guides/best-practices/ before adding new features

message VisualShader {
    message VisualShaderNode {
        optional int32 id = 1;
        
        optional double x_coordinate = 2;
        optional double y_coordinate = 3;
        
        oneof node_type {
            VisualShaderNodeInput input = 4;
            VisualShaderNodeOutput output = 5;

            /*************************************/
            /* CONSTANTS                         */
            /*************************************/
            VisualShaderNodeFloatConstant float_constant = 6;
            VisualShaderNodeIntConstant int_constant = 7;
            VisualShaderNodeUIntConstant uint_constant = 8;
            VisualShaderNodeBooleanConstant boolean_constant = 9;
            VisualShaderNodeColorConstant color_constant = 10;
            VisualShaderNodeVec2Constant vec2_constant = 11;
            VisualShaderNodeVec3Constant vec3_constant = 12;
            VisualShaderNodeVec4Constant vec4_constant = 13;
            
            /*************************************/
            /* OPERATORS                         */
            /*************************************/
            VisualShaderNodeFloatOp float_op = 14;
            VisualShaderNodeIntOp int_op = 15;
            VisualShaderNodeUIntOp uint_op = 16;
            VisualShaderNodeVectorOp vector_op = 17;

            /*************************************/
            /* Funcs Node                        */
            /*************************************/
            VisualShaderNodeFloatFunc float_func = 18;
            VisualShaderNodeIntFunc int_func = 19;
            VisualShaderNodeUIntFunc uint_func = 20;
            VisualShaderNodeVectorFunc vector_func = 21;

            /*************************************/
            /* NOISE                             */
            /*************************************/
            VisualShaderNodeValueNoise value_noise = 22;
            VisualShaderNodePerlinNoise perlin_noise = 23;
            VisualShaderNodeVoronoiNoise voronoi_noise = 24;

            /*************************************/
            /* MISC                              */
            /*************************************/
            VisualShaderNodeDotProduct dot_product = 25;
            VisualShaderNodeVectorLen vector_len = 26;
            VisualShaderNodeClamp clamp = 27;
            VisualShaderNodeStep step = 28;
            VisualShaderNodeSmoothStep smooth_step = 29;
            VisualShaderNodeVectorDistance vector_distance = 30;
            VisualShaderNodeMix mix = 31;
            VisualShaderNode2dVectorCompose vector_2d_compose = 32;
            VisualShaderNode3dVectorCompose vector_3d_compose = 33;
            VisualShaderNode4dVectorCompose vector_4d_compose = 34;
            VisualShaderNode2dVectorDecompose vector_2d_decompose = 35;
            VisualShaderNode3dVectorDecompose vector_3d_decompose = 36;
            VisualShaderNode4dVectorDecompose vector_4d_decompose = 37;
            VisualShaderNodeIf if_node = 38;
            VisualShaderNodeSwitch switch_node = 39;
            VisualShaderNodeIs is = 40;
            VisualShaderNodeCompare compare = 41;
        }
    }
    
    message VisualShaderConnection {
        optional int32 id = 1;
        optional int32 from_node_id = 2;
        optional int32 from_port_index = 3;
        optional int32 to_node_id = 4;
        optional int32 to_port_index = 5;
    }
    
    optional int32 id = 1;
    repeated VisualShaderNode nodes = 2;
    repeated VisualShaderConnection connections = 3;
    optional string fragment_shader_code = 4;
}
